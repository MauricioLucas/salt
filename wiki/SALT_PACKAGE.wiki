#summary Definition of SALT-PACKAGE file

===SALT PACKAGE ===

A valid salt PACKAGE has the following dir/name specification:
{{{
[PACKAGENAME]-[VERSION].7z.salt
/data              //Data folder which holds all relevant data
/install.sis       //SIS file (SALT Install Script)
/descriptor.yml    //SALT DESCRIPTOR
}}}

All downloaded PACKAGES are copyed into the salt install cache.
_Note: This design allows offline installing, i.e. pre downloading/caching._



==SALT DESCRIPTOR==

The SALT-DESCRIPTOR is a yml file ("descriptor.yml"). The used file format is yaml, an xml like format, with low overhead. 
The descriptor includes all necessary information about a package - like dependecies, version information, description, genre type.



==SALT install instructions==

SALT bases on the concept of a package manager like APT. So the salt core design is not limited to std Lib files.
Therefore, install instructions must be defined. The file Install.sis holds the specified instructions. Dependecies must NOT be handled here, as they are handled(cheched,updated, installed) by saltservice before.

The install instructions are a set of very basic commands;
{{{
// I'm a comment
#copy, /data/stdlib.ahk, %stdlib%\stdlib.ahk
#copy, /data/folder, /destfolder
#exec, /my_own_installer.exe
}}}
If a PACKAGE needs more control over installation process, the #exec command should be used to start a user definied exe or ahk script. This limts salt in some ways, minory in the deinstallation process, which bases on the install instructions. 

==SALT PACKAGE UNINSTALL==

First, a PACKAGE can only be uninstalled, if there arn't any other Packages, which depend on it. On the other hand, PACKAGES which has installed other PACKAGES, may uninstall these too for cleanup purposes. 

The uninstall process is the reverse of the installation script (so it's autogenerated by the installation as "Installation Log") ~ or a user defined ahk/exe file.



